{"version":3,"sources":["../../../lib/utils/col-cache.js"],"names":["addressRegex","colCache","_dictionary","_l2nFill","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Error","Math","floor","l2n","l","length","n2l","_hash","validateAddress","value","test","decodeAddress","addr","hasCol","col","colNumber","hasRow","row","rowNumber","i","char","charCodeAt","undefined","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","match","sheetName","reference","startsWith","error","encodeAddress","encode","arguments","inRange","range","module","exports"],"mappings":"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","sourcesContent":["const addressRegex = /^[A-Z]+\\d+$/;\n// =========================================================================\n// Column Letter to Number conversion\nconst colCache = {\n  _dictionary: [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n  ],\n  _l2nFill: 0,\n  _l2n: {},\n  _n2l: [],\n  _level(n) {\n    if (n <= 26) {\n      return 1;\n    }\n    if (n <= 26 * 26) {\n      return 2;\n    }\n    return 3;\n  },\n  _fill(level) {\n    let c;\n    let v;\n    let l1;\n    let l2;\n    let l3;\n    let n = 1;\n    if (level >= 4) {\n      throw new Error('Out of bounds. Excel supports columns from 1 to 16384');\n    }\n    if (this._l2nFill < 1 && level >= 1) {\n      while (n <= 26) {\n        c = this._dictionary[n - 1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n      this._l2nFill = 1;\n    }\n    if (this._l2nFill < 2 && level >= 2) {\n      n = 27;\n      while (n <= 26 + (26 * 26)) {\n        v = n - (26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26);\n        c = this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n      this._l2nFill = 2;\n    }\n    if (this._l2nFill < 3 && level >= 3) {\n      n = 26 + (26 * 26) + 1;\n      while (n <= 16384) {\n        v = n - ((26 * 26) + 26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26) % 26;\n        l3 = Math.floor(v / (26 * 26));\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n      this._l2nFill = 3;\n    }\n  },\n  l2n(l) {\n    if (!this._l2n[l]) {\n      this._fill(l.length);\n    }\n    if (!this._l2n[l]) {\n      throw new Error(`Out of bounds. Invalid column letter: ${l}`);\n    }\n    return this._l2n[l];\n  },\n  n2l(n) {\n    if (n < 1 || n > 16384) {\n      throw new Error(`${n} is out of bounds. Excel supports columns from 1 to 16384`);\n    }\n    if (!this._n2l[n]) {\n      this._fill(this._level(n));\n    }\n    return this._n2l[n];\n  },\n\n  // =========================================================================\n  // Address processing\n  _hash: {},\n\n  // check if value looks like an address\n  validateAddress(value) {\n    if (!addressRegex.test(value)) {\n      throw new Error(`Invalid Address: ${value}`);\n    }\n    return true;\n  },\n\n  // convert address string into structure\n  decodeAddress(value) {\n    const addr = value.length < 5 && this._hash[value];\n    if (addr) {\n      return addr;\n    }\n    let hasCol = false;\n    let col = '';\n    let colNumber = 0;\n    let hasRow = false;\n    let row = '';\n    let rowNumber = 0;\n    for (let i = 0, char; i < value.length; i++) {\n      char = value.charCodeAt(i);\n      // col should before row\n      if (!hasRow && char >= 65 && char <= 90) {\n        // 65 = 'A'.charCodeAt(0)\n        // 90 = 'Z'.charCodeAt(0)\n        hasCol = true;\n        col += value[i];\n        // colNumber starts from 1\n        colNumber = (colNumber * 26) + char - 64;\n      } else if (char >= 48 && char <= 57) {\n        // 48 = '0'.charCodeAt(0)\n        // 57 = '9'.charCodeAt(0)\n        hasRow = true;\n        row += value[i];\n        // rowNumber starts from 0\n        rowNumber = (rowNumber * 10) + char - 48;\n      } else if (hasRow && hasCol && char !== 36) {\n        // 36 = '$'.charCodeAt(0)\n        break;\n      }\n    }\n    if (!hasCol) {\n      colNumber = undefined;\n    } else if (colNumber > 16384) {\n      throw new Error(`Out of bounds. Invalid column letter: ${col}`);\n    }\n    if (!hasRow) {\n      rowNumber = undefined;\n    }\n\n    // in case $row$col\n    value = col + row;\n\n    const address = {\n      address: value,\n      col: colNumber,\n      row: rowNumber,\n      $col$row: `$${col}$${row}`,\n    };\n\n    // mem fix - cache only the tl 100x100 square\n    if (colNumber <= 100 && rowNumber <= 100) {\n      this._hash[value] = address;\n      this._hash[address.$col$row] = address;\n    }\n\n    return address;\n  },\n\n  // convert r,c into structure (if only 1 arg, assume r is address string)\n  getAddress(r, c) {\n    if (c) {\n      const address = this.n2l(c) + r;\n      return this.decodeAddress(address);\n    }\n    return this.decodeAddress(r);\n  },\n\n  // convert [address], [tl:br] into address structures\n  decode(value) {\n    const parts = value.split(':');\n    if (parts.length === 2) {\n      const tl = this.decodeAddress(parts[0]);\n      const br = this.decodeAddress(parts[1]);\n      const result = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col),\n      };\n      // reconstruct tl, br and dimensions\n      result.tl = this.n2l(result.left) + result.top;\n      result.br = this.n2l(result.right) + result.bottom;\n      result.dimensions = `${result.tl}:${result.br}`;\n      return result;\n    }\n    return this.decodeAddress(value);\n  },\n\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\n  decodeEx(value) {\n    const groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\n\n    const sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\n    const reference = groups[3]; // Remaining address\n\n    const parts = reference.split(':');\n    if (parts.length > 1) {\n      let tl = this.decodeAddress(parts[0]);\n      let br = this.decodeAddress(parts[1]);\n      const top = Math.min(tl.row, br.row);\n      const left = Math.min(tl.col, br.col);\n      const bottom = Math.max(tl.row, br.row);\n      const right = Math.max(tl.col, br.col);\n\n      tl = this.n2l(left) + top;\n      br = this.n2l(right) + bottom;\n\n      return {\n        top,\n        left,\n        bottom,\n        right,\n        sheetName,\n        tl: {address: tl, col: left, row: top, $col$row: `$${this.n2l(left)}$${top}`, sheetName},\n        br: {\n          address: br,\n          col: right,\n          row: bottom,\n          $col$row: `$${this.n2l(right)}$${bottom}`,\n          sheetName,\n        },\n        dimensions: `${tl}:${br}`,\n      };\n    }\n    if (reference.startsWith('#')) {\n      return sheetName ? {sheetName, error: reference} : {error: reference};\n    }\n\n    const address = this.decodeAddress(reference);\n    return sheetName ? {sheetName, ...address} : address;\n  },\n\n  // convert row,col into address string\n  encodeAddress(row, col) {\n    return colCache.n2l(col) + row;\n  },\n\n  // convert row,col into string address or t,l,b,r into range\n  encode() {\n    switch (arguments.length) {\n      case 2:\n        return colCache.encodeAddress(arguments[0], arguments[1]);\n      case 4:\n        return `${colCache.encodeAddress(arguments[0], arguments[1])}:${colCache.encodeAddress(\n          arguments[2],\n          arguments[3]\n        )}`;\n      default:\n        throw new Error('Can only encode with 2 or 4 arguments');\n    }\n  },\n\n  // return true if address is contained within range\n  inRange(range, address) {\n    const [left, top, , right, bottom] = range;\n    const [col, row] = address;\n    return col >= left && col <= right && row >= top && row <= bottom;\n  },\n};\n\nmodule.exports = colCache;\n"],"file":"col-cache.js"}