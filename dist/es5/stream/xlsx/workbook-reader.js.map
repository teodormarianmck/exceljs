{"version":3,"sources":["../../../../lib/stream/xlsx/workbook-reader.js"],"names":["fs","require","EventEmitter","PassThrough","Readable","nodeStream","unzip","tmp","iterateStream","parseSax","StyleManager","WorkbookXform","RelationshipsXform","WorksheetReader","HyperlinkReader","setGracefulCleanup","WorkbookReader","input","options","worksheets","sharedStrings","hyperlinks","styles","entries","init","createReadStream","Error","parse","eventType","value","emit","read","Symbol","asyncIterator","stream","_getStream","zip","Parse","forceStream","pipe","waitingWorkSheets","entry","match","sheetNo","path","_parseRels","_parseWorkbook","_parseSharedStrings","_parseStyles","workbookRels","_parseWorksheet","Promise","resolve","reject","file","err","fd","tempFileCleanupCallback","push","tempStream","createWriteStream","on","_parseHyperlinks","autodrain","fileStream","payload","xform","parseStream","_emitEntry","type","workbook","properties","map","workbookPr","model","text","richText","index","font","events","node","name","bold","charset","parseInt","attributes","color","rgb","argb","val","theme","family","italic","outline","size","underline","vertAlign","length","iterator","id","worksheetReader","matchingRel","find","rel","Target","matchingSheet","sheets","sheet","rId","Id","state","hyperlinksReader","Options","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst {EventEmitter} = require('events');\nconst {PassThrough, Readable} = require('readable-stream');\nconst nodeStream = require('stream');\nconst unzip = require('unzipper');\nconst tmp = require('tmp');\nconst iterateStream = require('../../utils/iterate-stream');\nconst parseSax = require('../../utils/parse-sax');\n\nconst StyleManager = require('../../xlsx/xform/style/styles-xform');\nconst WorkbookXform = require('../../xlsx/xform/book/workbook-xform');\nconst RelationshipsXform = require('../../xlsx/xform/core/relationships-xform');\n\nconst WorksheetReader = require('./worksheet-reader');\nconst HyperlinkReader = require('./hyperlink-reader');\n\ntmp.setGracefulCleanup();\n\nclass WorkbookReader extends EventEmitter {\n  constructor(input, options = {}) {\n    super();\n\n    this.input = input;\n\n    this.options = {\n      worksheets: 'emit',\n      sharedStrings: 'cache',\n      hyperlinks: 'ignore',\n      styles: 'ignore',\n      entries: 'ignore',\n      ...options,\n    };\n\n    this.styles = new StyleManager();\n    this.styles.init();\n  }\n\n  _getStream(input) {\n    if (input instanceof nodeStream.Readable || input instanceof Readable) {\n      return input;\n    }\n    if (typeof input === 'string') {\n      return fs.createReadStream(input);\n    }\n    throw new Error(`Could not recognise input: ${input}`);\n  }\n\n  async read(input, options) {\n    try {\n      for await (const {eventType, value} of this.parse(input, options)) {\n        switch (eventType) {\n          case 'shared-strings':\n            this.emit(eventType, value);\n            break;\n          case 'worksheet':\n            this.emit(eventType, value);\n            await value.read();\n            break;\n          case 'hyperlinks':\n            this.emit(eventType, value);\n            break;\n        }\n      }\n      this.emit('end');\n      this.emit('finished');\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const {eventType, value} of this.parse()) {\n      if (eventType === 'worksheet') {\n        yield value;\n      }\n    }\n  }\n\n  async *parse(input, options) {\n    if (options) this.options = options;\n    const stream = (this.stream = this._getStream(input || this.input));\n    const zip = unzip.Parse({forceStream: true});\n    stream.pipe(zip);\n\n    // worksheets, deferred for parsing after shared strings reading\n    const waitingWorkSheets = [];\n\n    for await (const entry of iterateStream(zip)) {\n      let match;\n      let sheetNo;\n      switch (entry.path) {\n        case '_rels/.rels':\n          break;\n        case 'xl/_rels/workbook.xml.rels':\n          await this._parseRels(entry);\n          break;\n        case 'xl/workbook.xml':\n          await this._parseWorkbook(entry);\n          break;\n        case 'xl/sharedStrings.xml':\n          yield* this._parseSharedStrings(entry);\n          break;\n        case 'xl/styles.xml':\n          await this._parseStyles(entry);\n          break;\n        default:\n          if (entry.path.match(/xl\\/worksheets\\/sheet\\d+[.]xml/)) {\n            match = entry.path.match(/xl\\/worksheets\\/sheet(\\d+)[.]xml/);\n            sheetNo = match[1];\n            if (this.sharedStrings && this.workbookRels) {\n              yield* this._parseWorksheet(iterateStream(entry), sheetNo);\n            } else {\n              // create temp file for each worksheet\n              await new Promise((resolve, reject) => {\n                tmp.file((err, path, fd, tempFileCleanupCallback) => {\n                  if (err) {\n                    return reject(err);\n                  }\n                  waitingWorkSheets.push({sheetNo, path, tempFileCleanupCallback});\n\n                  const tempStream = fs.createWriteStream(path);\n                  entry.pipe(tempStream);\n                  return tempStream.on('finish', () => {\n                    return resolve();\n                  });\n                });\n              });\n            }\n          } else if (entry.path.match(/xl\\/worksheets\\/_rels\\/sheet\\d+[.]xml.rels/)) {\n            match = entry.path.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)[.]xml.rels/);\n            sheetNo = match[1];\n            yield* this._parseHyperlinks(iterateStream(entry), sheetNo);\n          }\n          break;\n      }\n      entry.autodrain();\n    }\n\n    for (const {sheetNo, path, tempFileCleanupCallback} of waitingWorkSheets) {\n      let fileStream = fs.createReadStream(path);\n      // TODO: Remove once node v8 is deprecated\n      // Detect and upgrade old fileStreams\n      if (!fileStream[Symbol.asyncIterator]) {\n        fileStream = fileStream.pipe(new PassThrough());\n      }\n      yield* this._parseWorksheet(fileStream, sheetNo);\n      tempFileCleanupCallback();\n    }\n  }\n\n  _emitEntry(payload) {\n    if (this.options.entries === 'emit') {\n      this.emit('entry', payload);\n    }\n  }\n\n  async _parseRels(entry) {\n    const xform = new RelationshipsXform();\n    this.workbookRels = await xform.parseStream(iterateStream(entry));\n  }\n\n  async _parseWorkbook(entry) {\n    this._emitEntry({type: 'workbook'});\n\n    const workbook = new WorkbookXform();\n    await workbook.parseStream(iterateStream(entry));\n\n    this.properties = workbook.map.workbookPr;\n    this.model = workbook.model;\n  }\n\n  async *_parseSharedStrings(entry) {\n    this._emitEntry({type: 'shared-strings'});\n    switch (this.options.sharedStrings) {\n      case 'cache':\n        this.sharedStrings = [];\n        break;\n      case 'emit':\n        break;\n      default:\n        return;\n    }\n\n    let text = null;\n    let richText = [];\n    let index = 0;\n    let font = null;\n    for await (const events of parseSax(iterateStream(entry))) {\n      for (const {eventType, value} of events) {\n        if (eventType === 'opentag') {\n          const node = value;\n          switch (node.name) {\n            case 'b':\n              font = font || {};\n              font.bold = true;\n              break;\n            case 'charset':\n              font = font || {};\n              font.charset = parseInt(node.attributes.charset, 10);\n              break;\n            case 'color':\n              font = font || {};\n              font.color = {};\n              if (node.attributes.rgb) {\n                font.color.argb = node.attributes.argb;\n              }\n              if (node.attributes.val) {\n                font.color.argb = node.attributes.val;\n              }\n              if (node.attributes.theme) {\n                font.color.theme = node.attributes.theme;\n              }\n              break;\n            case 'family':\n              font = font || {};\n              font.family = parseInt(node.attributes.val, 10);\n              break;\n            case 'i':\n              font = font || {};\n              font.italic = true;\n              break;\n            case 'outline':\n              font = font || {};\n              font.outline = true;\n              break;\n            case 'rFont':\n              font = font || {};\n              font.name = node.value;\n              break;\n            case 'si':\n              font = null;\n              richText = [];\n              text = null;\n              break;\n            case 'sz':\n              font = font || {};\n              font.size = parseInt(node.attributes.val, 10);\n              break;\n            case 'strike':\n              break;\n            case 't':\n              text = null;\n              break;\n            case 'u':\n              font = font || {};\n              font.underline = true;\n              break;\n            case 'vertAlign':\n              font = font || {};\n              font.vertAlign = node.attributes.val;\n              break;\n          }\n        } else if (eventType === 'text') {\n          text = text ? text + value : value;\n        } else if (eventType === 'closetag') {\n          const node = value;\n          switch (node.name) {\n            case 'r':\n              richText.push({\n                font,\n                text,\n              });\n\n              font = null;\n              text = null;\n              break;\n            case 'si':\n              if (this.options.sharedStrings === 'cache') {\n                this.sharedStrings.push(richText.length ? {richText} : text);\n              } else if (this.options.sharedStrings === 'emit') {\n                yield {index: index++, text: richText.length ? {richText} : text};\n              }\n\n              richText = [];\n              font = null;\n              text = null;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  async _parseStyles(entry) {\n    this._emitEntry({type: 'styles'});\n    if (this.options.styles === 'cache') {\n      this.styles = new StyleManager();\n      await this.styles.parseStream(iterateStream(entry));\n    }\n  }\n\n  *_parseWorksheet(iterator, sheetNo) {\n    this._emitEntry({type: 'worksheet', id: sheetNo});\n    const worksheetReader = new WorksheetReader({\n      workbook: this,\n      id: sheetNo,\n      iterator,\n      options: this.options,\n    });\n\n    const matchingRel = (this.workbookRels || []).find(\n      rel => rel.Target === `worksheets/sheet${sheetNo}.xml`\n    );\n    const matchingSheet =\n      matchingRel && (this.model.sheets || []).find(sheet => sheet.rId === matchingRel.Id);\n    if (matchingSheet) {\n      worksheetReader.id = matchingSheet.id;\n      worksheetReader.name = matchingSheet.name;\n      worksheetReader.state = matchingSheet.state;\n    }\n    if (this.options.worksheets === 'emit') {\n      yield {eventType: 'worksheet', value: worksheetReader};\n    }\n  }\n\n  *_parseHyperlinks(iterator, sheetNo) {\n    this._emitEntry({type: 'hyperlinks', id: sheetNo});\n    const hyperlinksReader = new HyperlinkReader({\n      workbook: this,\n      id: sheetNo,\n      iterator,\n      options: this.options,\n    });\n    if (this.options.hyperlinks === 'emit') {\n      yield {eventType: 'hyperlinks', value: hyperlinksReader};\n    }\n  }\n}\n\n// for reference - these are the valid values for options\nWorkbookReader.Options = {\n  worksheets: ['emit', 'ignore'],\n  sharedStrings: ['cache', 'emit', 'ignore'],\n  hyperlinks: ['cache', 'emit', 'ignore'],\n  styles: ['cache', 'ignore'],\n  entries: ['emit', 'ignore'],\n};\n\nmodule.exports = WorkbookReader;\n"],"file":"workbook-reader.js"}